#! /bin/sh

#Makefile vars
SRCDIR=src
SRCSRC='main.c sed.c compile.c module.c regex.c'
SRCOUT='sed'
SRCPUT=bin
MODDIR=src/modules
MODSRC='posix.c module.c'
MODOUT='posix.so'
MODPUT=bin/modules
REGDIR=src/regex
REGSRC='posix.c'
REGOUT='posix.so'
REGPUT=bin/regex
DBGDIR=src/debug
DBGSRC='debug.c ../compile.c ../module.c ../regex.c'
DBGOUT='debug'
DBGPUT=bin
CFLAGS='-std=c99 -Wall -Wextra -Wno-unused-parameter'
LDFLAGS='-ldl'
CC='gcc clang cc'

abort() {
    echo "Aborting..."
    exit 1
}

#Checking for compiling tools

echo -n "Checking for a C compiler ... "
found=0

for c in $CC; do
    if [ -n "`which $c`" ]; then
        cc=$c
        echo "yes"
        found=1
        break
    fi
done
if [ ! $found ]; then
    echo "no"
    abort
fi

echo -n "Checking for make ... "
if [ -n "`which make`" ]; then
    echo "yes"
else
    echo "no"
    abort
fi

#Checking required headers and functions

get_headers() {
    grep -s "#include <" $1/*.{c,h}  | cut -d '<' -f 2 | cut -d '>' -f 1 | sort -u
}

check_headers() {
    errors=0
    for h in $1; do
        echo -n "Testing for $h ... "
        if [ -z "`find /usr/include -type f | grep $h`" ]; then
            echo "no"
            ((errors++))
        else
            echo "yes"
        fi
    done
    [[ $errors != 0 ]] && echo "$errors error(s)"
    return $errors
}

exclude_keywords() {
    grep -wv "while" | grep -wv "switch" | grep -wv "if" | grep -wv "for"
}

get_function_calls() {
    grep -s -o -e "^ *\([^=]*= \?\)\?\( \?([a-z_]\+\*) \?\)\?[a-z_]\+ *(" $1/*.c
}

get_all_functions() {
    for dir in $1; do
        OWN_FUNCS="$OWN_FUNCS $(grep -s -e "^[a-z*_]\+ [a-z_]\+ \?(" $dir/*.c | cut -d '(' -f 1 | cut -d ' ' -f 2)"
        OWN_MACROS="$OWN_MACROS $(grep -s -e "#define [a-z_]\+ \?(" $dir/*.h | cut -d '(' -f 1 | cut -d ' ' -f 2)"
        ALL_FUNCS="$ALL_FUNCS $(get_function_calls $dir | cut -d '=' -f 2 | cut -d ':' -f 2 | cut -d ')' -f 2 | cut -d '(' -f 1 | tr -d ' ' | exclude_keywords | sort -u)"
    done
    for func in $ALL_FUNCS; do
        [[ $OWN_FUNCS =~ "$func" ]] || [[ $OWN_MACROS =~ "$func" ]] || echo $func
    done
}

check_functions(){
    errors=0
    for f in $1; do
        echo -n "Testing for $f ... "
        found=0
        for h in $2; do
            if [ -n "`grep "$f (" \`find /usr/include -type f | grep $h\``" ]; then
                echo "yes"
                found=1
                break
            fi
        done
        if [ $found == 0 ]; then
            echo "no"
            ((errors++))
        fi
    done
    [[ $errors != 0 ]] && echo "$errors error(s)"
    return $errors
}

DIRS="$SRCDIR $MODDIR $REGDIR $DBGDIR"
for dir in $DIRS; do
    HEADERS="$HEADERS $(get_headers $dir)"
done
FUNCTIONS=$(get_all_functions "$DIRS" | sort -u)
check_headers "$HEADERS" || abort
check_functions "$FUNCTIONS" "$HEADERS" || abort

#Generatign directories and makefiles

mkdir -p $SRCPUT
mkdir -p $MODPUT
mkdir -p $REGPUT
mkdir -p $DBGPUT

echo "all:" > Makefile
echo -e "\tcd $SRCDIR && make all" >> Makefile
echo -e "\tcd $MODDIR && make all" >> Makefile
echo -e "\tcd $REGDIR && make all" >> Makefile
echo -e "\tcd $DBGDIR && make all" >> Makefile
echo "" >> Makefile
echo "clean:" >> Makefile
echo -e "\tcd $SRCDIR && make clean" >> Makefile
echo -e "\tcd $MODDIR && make clean" >> Makefile
echo -e "\tcd $REGDIR && make clean" >> Makefile
echo -e "\tcd $DBGDIR && make clean" >> Makefile
echo "" >> Makefile
echo "cleanall:" >> Makefile
echo -e "\tmake clean && rm -rf $SRCPUT" >> Makefile
echo "" >> Makefile
echo "force:" >> Makefile
echo -e "\tcd $SRCDIR && make force" >> Makefile
echo -e "\tcd $MODDIR && make force" >> Makefile
echo -e "\tcd $REGDIR && make force" >> Makefile
echo -e "\tcd $DBGDIR && make force" >> Makefile

echo "CC=$cc" > $SRCDIR/Makefile
echo "CFLAGS=$CFLAGS" >> $SRCDIR/Makefile
echo "LDFLAGS=$LDFLAGS" >> $SRCDIR/Makefile
echo "OUTPUT=$SRCOUT" >> $SRCDIR/Makefile
echo "OUTDIR=$PWD/$SRCPUT" >> $SRCDIR/Makefile
echo "SRC=$SRCSRC" >> $SRCDIR/Makefile
echo "OBJ=\$(SRC:.c=.o)" >> $SRCDIR/Makefile
echo "" >> $SRCDIR/Makefile
echo "all: \$(OUTPUT)" >> $SRCDIR/Makefile
echo "" >> $SRCDIR/Makefile
echo "\$(OUTPUT): \$(OBJ)" >> $SRCDIR/Makefile
echo -e "\t\$(CC) -o \$(OUTPUT) \$(OBJ) \$(LDFLAGS)" >> $SRCDIR/Makefile
echo -e "\tmv \$(OUTPUT) \$(OUTDIR)" >> $SRCDIR/Makefile
echo "" >> $SRCDIR/Makefile
echo ".c.o:" >> $SRCDIR/Makefile
echo -e "\t\$(CC) -c \$(CFLAGS) \$<" >> $SRCDIR/Makefile
echo "" >> $SRCDIR/Makefile
echo "clean:" >> $SRCDIR/Makefile
echo -e "\trm -f *.o " >> $SRCDIR/Makefile
echo "" >> $SRCDIR/Makefile
echo "force:" >> $SRCDIR/Makefile
echo -e "\tmake clean && make all" >> $SRCDIR/Makefile

cp $SRCDIR/Makefile $MODDIR/Makefile
sed -i "/^CFLAGS/s/$/ -fPIC/" $MODDIR/Makefile
sed -i "/^LDFLAGS/s/=[^=]*$/=-shared/" $MODDIR/Makefile
sed -i "/^OUTPUT/s|=[^=]*$|=$MODOUT|" $MODDIR/Makefile
sed -i "/^OUTDIR/s|=[^=]*$|=$PWD/$MODPUT|" $MODDIR/Makefile
sed -i "/^SRC/s|=[^=]*$|=$MODSRC|" $MODDIR/Makefile

cp $MODDIR/Makefile $REGDIR/Makefile
sed -i "/^OUTPUT/s|=[^=]*$|=$REGOUT|" $REGDIR/Makefile
sed -i "/^OUTDIR/s|=[^=]*$|=$PWD/$REGPUT|" $REGDIR/Makefile
sed -i "/^SRC/s|=[^=]*$|=$REGSRC|" $REGDIR/Makefile

cp $SRCDIR/Makefile $DBGDIR/Makefile
sed -i "/^CFLAGS/s/$/ -I../" $DBGDIR/Makefile
sed -i "/^OUTPUT/s|=[^=]*$|=$DBGOUT|" $DBGDIR/Makefile
sed -i "/^OUTDIR/s|=[^=]*$|=$PWD/$DBGPUT|" $DBGDIR/Makefile
sed -i "/^SRC/s|=[^=]*$|=$DBGSRC|" $DBGDIR/Makefile
